{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/regenerator-runtime/runtime.js","src/scripts/cell.js","src/scripts/constants.js","src/scripts/dictionary.js","src/scripts/extensions.js","src/scripts/keyboard.js","src/scripts/main.js","src/scripts/row.js","src/scripts/ui.js"],"names":[],"mappings":"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","file":"script.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export class Cell {\n\n\tconstructor() {\n\t\t// Initialize element\n\t\tthis.element = document.createElement(\"div\");\n\t\tthis.element.classList.add(\"cell\");\n\t}\n\n\tclear() {\n\t\tthis.letter = \"\";\n\t\tthis.element.classList.remove(\"correct\");\n\t\tthis.element.classList.remove(\"incorrect\");\n\t\tthis.element.classList.remove(\"hint\");\n\t\tthis.element.removeAttribute(\"data-badge\");\n\t}\n\n\tsetBadge(text) {\n\t\tthis.element.setAttribute(\"data-badge\", text);\n\t}\n\n\tmarkAsCorrect() {\n\t\tthis.element.classList.add(\"correct\");\n\t}\n\n\tmarkAsIncorrect() {\n\t\tthis.element.classList.add(\"incorrect\");\n\t}\n\n\tmarkAsHint() {\n\t\tthis.element.classList.add(\"hint\");\n\t}\n\n\tget letter() {\n\t\treturn this.element.innerText;\n\t}\n\n\tset letter(value) {\n\t\tthis.element.innerText = value;\n\t}\n\n}\n","// Constants\nexport const POINTS_CORRECT_LETTER_AND_ORDER = 10;\nexport const POINTS_CORRECT_LETTER_WRONG_ORDER = 2;\nexport const STATE_PLAYING = 0;\nexport const STATE_GAME_OVER = 1;\nexport const ALPHABET = [\n\t\"A\",\n\t\"B\",\n\t\"C\",\n\t\"D\",\n\t\"E\",\n\t\"F\",\n\t\"G\",\n\t\"H\",\n\t\"I\",\n\t\"J\",\n\t\"K\",\n\t\"L\",\n\t\"M\",\n\t\"N\",\n\t\"O\",\n\t\"P\",\n\t\"Q\",\n\t\"R\",\n\t\"S\",\n\t\"T\",\n\t\"U\",\n\t\"V\",\n\t\"W\",\n\t\"X\",\n\t\"Y\",\n\t\"Z\",\n];\n","export class Dictionary {\n\n\tconstructor(wordSize) {\n\t\tthis.filename = \"lang/dictionary-enus.txt\";\n\t\tthis.wordSize = wordSize;\n\t\tthis.words = [];\n\t\tthis.index = 0;\n\t}\n\n\tasync init() {\n\t\tconst lines = await this.#loadFile();\n\n\t\t// Process it\n\t\tconsole.groupCollapsed(\"Dictionary\");\n\t\tconsole.log(\"Loaded dictionary!\");\n\t\tconsole.log(`Found ${lines.length} in total`);\n\n\t\tthis.#filterSameSizeWords(lines);\n\n\t\t// Randomize the word list\n\t\tthis.words.shuffle();\n\t\tconsole.log(`${this.words.length} words with ${this.wordSize} letters (${Math.floor((this.words.length / lines.length) * 100)}%)`);\n\t\tconsole.log(this.words);\n\t\tconsole.groupEnd();\n\t}\n\n\tasync #loadFile() {\n\t\tconst response = await fetch(this.filename);\n\t\tconst content = await response.text();\n\n\t\treturn content.split(/\\r?\\n/g);\n\t}\n\n\t#filterSameSizeWords(words) {\n\t\t// Remove words with different length than the given one\n\t\tthis.words = words.filter((x) => x.length === this.wordSize);\n\t}\n\n\tgetNextWord() {\n\t\tconst word = this.words[this.index++].toUpperCase();\n\t\tconsole.log(`%cTarget word: ${word}`, \"color: magenta\");\n\n\t\treturn word;\n\t}\n\n}\n","Array.prototype.random = function() {\n\tconst index = Math.floor(Math.random() * this.length);\n\n\treturn this[index];\n};\n\nArray.prototype.contains = function(elem) {\n\treturn this.includes(elem);\n};\n\nArray.prototype.shuffle = function() {\n\tfor (let i = this.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[this[i], this[j]] = [this[j], this[i]];\n\t}\n};\n\nString.prototype.contains = function(search) {\n\treturn this.indexOf(search) !== -1;\n};\n","import { STATE_GAME_OVER, ALPHABET } from \"./constants.js\";\n\nconst CODE_BACKSPACE = 8;\nconst CODE_RETURN = 13;\nconst CODE_A = 65;\nconst CODE_Z = 90;\n\nexport class Keyboard {\n\n\tconstructor(main) {\n\t\tthis.main = main;\n\n\t\t// Create element\n\t\tthis.element = document.createElement(\"div\");\n\t\tthis.element.classList.add(\"keyboard\");\n\t\tthis.#generate();\n\t\tdocument.body.appendChild(this.element);\n\n\t\t// Register event listeners\n\t\tthis.#attachHooks();\n\t}\n\n\tasync #generate() {\n\t\t// Define the keyboard layout\n\t\tconst layout = [\n\t\t\t[\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"],\n\t\t\t[\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"],\n\t\t\t[\"#BACKSPACE\", \"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\", \"#ENTER\"]\n\t\t];\n\n\t\t// For each row in the layout\n\t\tfor (const row of layout) {\n\t\t\t// Create the row element\n\t\t\tconst rowElement = document.createElement(\"div\");\n\t\t\trowElement.classList.add(\"row\");\n\n\t\t\t// For each key in the row\n\t\t\tfor (const col of row) {\n\t\t\t\tconst keyElement = await this.#createKeyElement(col);\n\n\t\t\t\trowElement.appendChild(keyElement);\n\t\t\t}\n\n\t\t\tthis.element.appendChild(rowElement);\n\t\t}\n\t}\n\n\tasync #createKeyElement(col) {\n\t\t// Create the key element\n\t\tconst keyElement = document.createElement(\"div\");\n\t\tkeyElement.classList.add(\"key\");\n\t\tkeyElement.setAttribute(\"data-key\", col);\n\n\t\t// If special key, use an icon to describe it\n\t\tif (col.startsWith(\"#\")) {\n\t\t\t// Import SVG icon\n\t\t\tkeyElement.innerHTML = await this.#loadSVG(col.substring(1));\n\t\t\tkeyElement.classList.add(\"img\");\n\t\t} else {\n\t\t\t// Otherwise just the letter\n\t\t\tkeyElement.innerText = col;\n\t\t}\n\n\t\t// Handle tap\n\t\tkeyElement.addEventListener(\"click\", this.#onVirtualKeyBoardClick.bind(this, col));\n\n\t\treturn keyElement;\n\t}\n\n\tasync #loadSVG(name) {\n\t\treturn await fetch(`assets/ic_${name.toLowerCase()}.svg`).then((x) => x.text());\n\t}\n\n\t#onVirtualKeyBoardClick(key) {\n\t\t// If the game is in GAME_OVER state, just reset it\n\t\tif (this.main.state === STATE_GAME_OVER) return this.main.reset();\n\n\t\tswitch (key) {\n\t\t\tcase \"#BACKSPACE\":\n\t\t\t\t// Handle letter erasing\n\t\t\t\tthis.main.onBackspacePressed();\n\t\t\t\tbreak;\n\n\t\t\tcase \"#ENTER\":\n\t\t\t\t// Handle row completion\n\t\t\t\tthis.main.onEnterPressed();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Handle letter typing\n\t\t\t\tthis.main.onTypeLetter(key);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t#getKeyElement(key) {\n\t\treturn this.element.querySelector(`[data-key=\"${key}\"`);\n\t}\n\n\t#simulateKeyTap(event) {\n\t\tlet key = event.key.toUpperCase();\n\n\t\t// Special keys\n\t\tif (event.keyCode === CODE_BACKSPACE || event.keyCode === CODE_RETURN) key = `#${key}`;\n\n\t\t// Fetch the key element\n\t\tconst element = this.#getKeyElement(key);\n\n\t\t// Highlight the key\n\t\tif (event.type === \"keyup\") {\n\t\t\telement?.classList.remove(\"active\");\n\t\t} else if (event.type === \"keydown\") {\n\t\t\telement?.classList.add(\"active\");\n\t\t}\n\t}\n\n\t#attachHooks() {\n\t\twindow.addEventListener(\"keyup\", this.#onKey.bind(this));\n\t\twindow.addEventListener(\"keydown\", this.#onKey.bind(this));\n\t\twindow.addEventListener(\"keypress\", this.#onKey.bind(this));\n\t}\n\n\t#onKey(event) {\n\t\tthis.#simulateKeyTap(event);\n\n\t\tif (event.type !== \"keydown\") return;\n\n\t\t// If the game is in GAME_OVER state, just reset it\n\t\tif (this.main.state === STATE_GAME_OVER) return this.main.reset();\n\n\t\tif (event.keyCode >= CODE_A && event.keyCode <= CODE_Z) {\n\t\t\t// Handle letter typing\n\t\t\tthis.main.onTypeLetter(String.fromCharCode(event.keyCode));\n\n\t\t\tevent.preventDefault();\n\t\t} else if (event.keyCode === CODE_BACKSPACE) {\n\t\t\t// Handle letter erasing\n\t\t\tthis.main.onBackspacePressed();\n\n\t\t\tevent.preventDefault();\n\t\t} else if (event.keyCode === CODE_RETURN) {\n\t\t\t// Handle row completion\n\t\t\tthis.main.onEnterPressed();\n\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\tclear() {\n\t\tfor (let i = 0; i < ALPHABET.length; i++) {\n\t\t\tconst element = this.#getKeyElement(ALPHABET[i]);\n\t\t\telement.classList.remove(\"correct\");\n\t\t\telement.classList.remove(\"hint\");\n\t\t\telement.classList.remove(\"incorrect\");\n\t\t\telement.classList.remove(\"active\");\n\t\t}\n\t}\n\n\thighlightKeysAccordingToAnswer(answer, stats) {\n\t\tfor (const letter in stats) {\n\t\t\tif (!stats.hasOwnProperty(letter)) continue;\n\n\t\t\tconst element = this.#getKeyElement(letter);\n\n\t\t\tif (stats[letter].misplaced > 0) {\n\t\t\t\telement.classList.add(\"hint\");\n\t\t\t} else if (stats[letter].matches > 0) {\n\t\t\t\telement.classList.add(\"correct\");\n\t\t\t}\n\t\t}\n\n\t\tfor (const letter of answer) {\n\t\t\tif (!stats.hasOwnProperty(letter) || stats[letter].count <= 0) {\n\t\t\t\tconst element = this.#getKeyElement(letter);\n\t\t\t\telement?.classList.add(\"incorrect\");\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import \"./extensions.js\";\nimport { UI } from \"./ui.js\";\nimport { Dictionary } from \"./dictionary.js\";\nimport { Keyboard } from \"./keyboard.js\";\nimport { POINTS_CORRECT_LETTER_AND_ORDER, POINTS_CORRECT_LETTER_WRONG_ORDER, STATE_PLAYING, STATE_GAME_OVER } from \"./constants.js\";\n\nclass Main {\n\t\n\tconstructor() {\n\t\tthis.rowCount = 6;\n\t\tthis.wordSize = 4;\n\n\t\tthis.ui = new UI(this.rowCount, this.wordSize);\n\t\tthis.cursor = { row: 0, col: 0 };\n\n\t\tthis.dictionary = new Dictionary(this.wordSize);\n\n\t\t// Initializes the keyboard\n\t\tthis.keyboard = new Keyboard(this);\n\n\t\tthis.init();\n\t}\n\n\treset() {\n\t\t// Reset the keyboard state\n\t\tthis.keyboard.clear();\n\n\t\t// Reset variables\n\t\tthis.points = 0;\n\t\tthis.cursor = { row: 0, col: 0 };\n\n\t\t// Reset all the cells\n\t\tfor (let row = 0; row < this.rowCount; row++) this.ui.resetRow(row);\n\n\t\t// Request another word\n\t\tthis.targetWord = this.dictionary.getNextWord();\n\n\t\t// Set game sate\n\t\tthis.state = STATE_PLAYING;\n\n\t\t// Highlight the first row, indicating the game is ready\n\t\tthis.highlightCurrentRow(0);\n\t}\n\n\tasync init() {\n\t\t// Loads the dictionary\n\t\tawait this.dictionary.init();\n\n\t\t// And post-pone game initial state\n\t\tsetTimeout(this.reset.bind(this), 250);\n\t}\n\n\tonTypeLetter(letter) {\n\t\t// Check whether the cell is empty\n\t\tif (!this.ui.isEmpty(this.cursor)) {\n\t\t\tif (this.cursor.col >= this.wordSize - 1) return;\n\t\t\tthis.cursor.col++;\n\t\t}\n\n\t\t// Set the letter at cursor\n\t\tthis.ui.setCell(this.cursor, letter);\n\n\t\t// Move cursor\n\t\tif (this.cursor.col < this.wordSize - 1) this.cursor.col++;\n\t}\n\n\tonBackspacePressed() {\n\t\twhile (this.cursor.col > 0 && this.ui.isEmpty(this.cursor)) {\n\t\t\tthis.cursor.col--;\n\t\t}\n\n\t\t// Remove the letter at cursor\n\t\tthis.ui.setCell(this.cursor, \"\");\n\n\t\t// Move cursor\n\t\tif (this.cursor.col > 0) this.cursor.col--;\n\t}\n\n\tonEnterPressed() {\n\t\t// Check if all the letters in the row have been defined\n\t\tif (this.cursor.col <= this.wordSize && !this.ui.isEmpty(this.cursor)) {\n\t\t\t// Validate completed row\n\t\t\tthis.onRowCompletion();\n\n\t\t\t// If still playing\n\t\t\tif (this.state === STATE_PLAYING) {\n\t\t\t\t// Check if we are out of tries\n\t\t\t\tif (this.cursor.row + 1 >= this.rowCount) {\n\t\t\t\t\tthis.state = STATE_GAME_OVER;\n\n\t\t\t\t\tthis.ui.showToast(\"Game over!\");\n\t\t\t\t} else {\n\t\t\t\t\t// Highlight the next row as active\n\t\t\t\t\tthis.highlightCurrentRow(this.cursor.row + 1);\n\n\t\t\t\t\t// Move to next line\n\t\t\t\t\tthis.cursor.row++;\n\t\t\t\t\tthis.cursor.col = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.ui.showToast(\"Too short!\");\n\t\t}\n\t}\n\n\tonRowCompletion() {\n\t\t// Get the row's text\n\t\tconst answer = this.ui.getRowText(this.cursor.row);\n\n\t\t// Checks if the game has been won\n\t\tif (answer === this.targetWord) return this.#onCorrectAnswer(this.cursor.row);\n\n\t\t// Analyzes misplaces occurrences\n\t\tconst stats = this.#analyzeMatches(answer);\n\t\tfor (let i = 0; i < this.wordSize; i++) {\n\t\t\tconst expected = this.targetWord[i];\n\t\t\tconst actual = answer[i];\n\t\t\tconst cell = this.ui.getCell({ row: this.cursor.row, col: i });\n\n\t\t\tif (expected === actual) {\n\t\t\t\t// Only one occurrence of 'actual' letter, but there is more than one in the word\n\t\t\t\tif (stats[actual].count > stats[actual].matches && stats[actual].misplaced <= 0) cell.setBadge(stats[actual].count);\n\n\t\t\t\t// Expected and in corrected spot\n\t\t\t\tcell.markAsCorrect();\n\n\t\t\t\t// Register points\n\t\t\t\tthis.points += POINTS_CORRECT_LETTER_AND_ORDER;\n\t\t\t} else if (stats.hasOwnProperty(actual) && stats[actual].count > stats[actual].matches) {\n\t\t\t\t// Only occurrence of 'actual' letter, and with more than one occurrence on the word but on different spots\n\t\t\t\tif (stats[actual].count > stats[actual].misplaced && stats[actual].count > 1) cell.setBadge(stats[actual].count);\n\n\t\t\t\t// Wrong spot\n\t\t\t\tcell.markAsHint();\n\n\t\t\t\t// Register points\n\t\t\t\tthis.points += POINTS_CORRECT_LETTER_WRONG_ORDER;\n\t\t\t} else {\n\t\t\t\t// Wrong letter and spot\n\t\t\t\tcell.markAsIncorrect();\n\t\t\t}\n\t\t}\n\n\t\t// Highlights the keyboard keys\n\t\tthis.keyboard.highlightKeysAccordingToAnswer(answer, stats);\n\t}\n\n\t#analyzeMatches(answer) {\n\t\tconst stats = {};\n\t\tconst createIfNonExistent = (property) => {\n\t\t\tif (!stats.hasOwnProperty(property)) {\n\t\t\t\tstats[property] = {\n\t\t\t\t\tcount: 0,\n\t\t\t\t\tmatches: 0,\n\t\t\t\t\tmisplaced: 0\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\t// Analyzes letter occurrences\n\t\tfor (let i = 0; i < this.wordSize; i++) {\n\t\t\tconst expected = this.targetWord[i];\n\t\t\tconst actual = answer[i];\n\n\t\t\tcreateIfNonExistent(expected);\n\n\t\t\tstats[expected].count++; // Count occurrence\n\t\t\tif (expected === actual) stats[expected].matches++; // Count match\n\t\t}\n\n\t\tthis.#analyzeMismatches(stats, answer, createIfNonExistent);\n\n\t\treturn stats;\n\t}\n\n\t#analyzeMismatches(stats, answer, createIfNonExistent) {\n\t\t// Analyzes letter misplacement\n\t\tfor (let i = 0; i < this.wordSize; i++) {\n\t\t\tconst expected = this.targetWord[i];\n\t\t\tconst actual = answer[i];\n\n\t\t\tif (actual !== expected && stats.hasOwnProperty(actual) && stats[actual].count > 0) {\n\t\t\t\tcreateIfNonExistent(actual);\n\n\t\t\t\tstats[actual].misplaced++; // Count misplaced\n\t\t\t}\n\t\t}\n\t}\n\n\t#onCorrectAnswer(row) {\n\t\t// Add points\n\t\tthis.points += POINTS_CORRECT_LETTER_AND_ORDER * this.wordSize * 3;\n\n\t\t// Visual feedback\n\t\tthis.ui.showToast(\"You win!\");\n\n\t\t// Change the game state\n\t\tthis.state = STATE_GAME_OVER;\n\n\t\t// Highlight entire row as correct\n\t\tfor (let col = 0; col < this.wordSize; col++) this.ui.getCell({ row, col }).markAsCorrect();\n\t}\n\n\thighlightCurrentRow(row) {\n\t\tthis.ui.rows[this.cursor.row].clear();\n\t\tthis.ui.rows[row].markAsActive();\n\t}\n\n}\n\nnew Main();\n","import { Cell } from \"./cell.js\";\n\nexport class Row {\n\n\tconstructor(cellCount) {\n\t\t// Initialize element\n\t\tthis.element = document.createElement(\"div\");\n\t\tthis.element.classList.add(\"row\");\n\n\t\t// Initialize the cells\n\t\tthis.cells = [];\n\t\tfor (let i = 0; i < cellCount; i++) {\n\t\t\tconst cell = new Cell();\n\t\t\tthis.cells.push(cell);\n\t\t\tthis.element.appendChild(cell.element);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis.element.classList.remove(\"active\");\n\t}\n\n\tmarkAsActive() {\n\t\tthis.element.classList.add(\"active\");\n\t}\n\n}\n","import { Row } from \"./row.js\";\n\nexport class UI {\n\n\tconstructor(rowCount, wordSize) {\n\t\t// Initialize element\n\t\tthis.element = document.createElement(\"div\");\n\t\tthis.element.classList.add(\"ui\");\n\t\tdocument.body.appendChild(this.element);\n\n\t\t// Initialize the rows\n\t\tthis.#generateRows(rowCount, wordSize);\n\t}\n\n\t#generateRows(rowCount, wordSize) {\n\t\tthis.rows = [];\n\t\tfor (let i = 0; i < rowCount; i++) {\n\t\t\tconst row = new Row(wordSize);\n\t\t\tthis.rows.push(row);\n\t\t\tthis.element.appendChild(row.element);\n\t\t}\n\t}\n\n\tsetCell({ row, col }, key) {\n\t\tthis.rows[row].cells[col].letter = key;\n\t}\n\n\tgetCell({ row, col }) {\n\t\treturn this.rows[row].cells[col];\n\t}\n\n\tisEmpty({ row, col }) {\n\t\tconst letter = this.rows[row].cells[col].letter;\n\n\t\treturn !letter || letter.length <= 0;\n\t}\n\n\tgetRowText(row) {\n\t\treturn this.rows[row].cells.map((x) => x.letter).join(\"\");\n\t}\n\n\tresetRow(row) {\n\t\tthis.rows[row].clear();\n\n\t\tfor (let col = 0; col < this.rows[row].cells.length; col++) {\n\t\t\tthis.rows[row].cells[col].clear();\n\t\t}\n\t}\n\n\tshowToast(message, duration = 2000) {\n\t\t// Creates a toast element\n\t\tconst element = document.createElement(\"div\");\n\t\telement.classList.add(\"toast\");\n\t\telement.setAttribute(\"data-duration\", duration);\n\t\telement.innerText = message;\n\n\t\t// Shows it\n\t\tdocument.body.appendChild(element);\n\n\t\tsetTimeout(() => {\n\t\t\telement.classList.add(\"removing\");\n\t\t}, duration - 250);\n\n\t\t// Removes the toast element\n\t\tsetTimeout(() => {\n\t\t\tdocument.body.removeChild(element);\n\t\t}, duration);\n\t}\n\n\tshowMessage(message) {\n\t\tconst element = document.createElement(\"div\");\n\t\telement.classList.add(\"message\");\n\t\telement.innerText = message;\n\t}\n\n\t#markLetter(letter, tag) {\n\t\tconst letterElement = [...this.keyboardElement.children].find((x) => x.innerText === letter);\n\t\tletterElement.classList.add(tag);\n\t}\n\n\tmarkLetterAsCorrect(letter) {\n\t\tthis.#markLetter(letter, \"correct\");\n\t}\n\n\tmarkLetterAsIncorrect(letter) {\n\t\tthis.#markLetter(letter, \"incorrect\");\n\t}\n\n\tmarkLetterAsHint(letter) {\n\t\tthis.#markLetter(letter, \"hit\");\n\t}\n\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}